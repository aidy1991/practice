	.section	__TEXT,__text,regular,pure_instructions
	.globl	_main
	.align	4, 0x90
_main:                                  ## @main
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp2:
	.cfi_def_cfa_offset 16
Ltmp3:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp4:
	.cfi_def_cfa_register %rbp
	subq	$384, %rsp              ## imm = 0x180
	movabsq	$-1, %rax
	movl	$0, -276(%rbp)
	movl	$0, -280(%rbp)
	movl	$4, -284(%rbp)
	movslq	-284(%rbp), %rcx
	movl	$4, %edx
	movl	%edx, %esi
	movq	%rax, -336(%rbp)        ## 8-byte Spill
	movq	%rcx, %rax
	mulq	%rsi
	seto	%dil
	testb	$1, %dil
	movq	-336(%rbp), %rcx        ## 8-byte Reload
	cmoveq	%rax, %rcx
	movq	%rcx, %rdi
	callq	__Znam
	leaq	-300(%rbp), %rcx
	movq	%rax, -296(%rbp)
	movq	-296(%rbp), %rax
	movq	-296(%rbp), %rdx
	movslq	-284(%rbp), %rsi
	shlq	$2, %rsi
	addq	%rsi, %rdx
	movl	$0, -300(%rbp)
	movq	%rax, -248(%rbp)
	movq	%rdx, -256(%rbp)
	movq	%rcx, -264(%rbp)
	movq	-248(%rbp), %rax
	movq	-256(%rbp), %rcx
	movq	-264(%rbp), %rdx
	movq	%rax, -216(%rbp)
	movq	%rcx, -224(%rbp)
	movq	%rdx, -232(%rbp)
	movq	-216(%rbp), %rax
	movq	-224(%rbp), %rcx
	movq	-216(%rbp), %rdx
	subq	%rdx, %rcx
	sarq	$2, %rcx
	movq	-232(%rbp), %rdx
	movq	%rax, -192(%rbp)
	movq	%rcx, -200(%rbp)
	movq	%rdx, -208(%rbp)
	movq	-192(%rbp), %rax
	movq	-200(%rbp), %rcx
	movq	-208(%rbp), %rdx
	movq	%rax, -168(%rbp)
	movq	%rcx, -176(%rbp)
	movq	%rdx, -184(%rbp)
LBB0_1:                                 ## =>This Inner Loop Header: Depth=1
	cmpq	$0, -176(%rbp)
	jle	LBB0_3
## BB#2:                                ##   in Loop: Header=BB0_1 Depth=1
	movq	-184(%rbp), %rax
	movl	(%rax), %ecx
	movq	-168(%rbp), %rax
	movl	%ecx, (%rax)
	movq	-168(%rbp), %rax
	addq	$4, %rax
	movq	%rax, -168(%rbp)
	movq	-176(%rbp), %rax
	addq	$-1, %rax
	movq	%rax, -176(%rbp)
	jmp	LBB0_1
LBB0_3:                                 ## %_ZNSt3__14fillIPiiEEvT_S2_RKT0_.exit
	movq	__ZNSt3__13cinE@GOTPCREL(%rip), %rdi
	leaq	-280(%rbp), %rsi
	callq	__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEErsERi
	movabsq	$-1, %rsi
	movslq	-280(%rbp), %rdi
	cmpq	$0, %rdi
	setl	%cl
	testb	$1, %cl
	cmoveq	%rdi, %rsi
	movq	%rsi, %rdi
	movq	%rax, -344(%rbp)        ## 8-byte Spill
	callq	__Znam
	movq	__ZNSt3__13cinE@GOTPCREL(%rip), %rdi
	movq	%rax, -312(%rbp)
	movq	-312(%rbp), %rsi
	callq	__ZNSt3__1rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_PS4_
	movl	$0, -316(%rbp)
	movq	%rax, -352(%rbp)        ## 8-byte Spill
LBB0_4:                                 ## =>This Inner Loop Header: Depth=1
	movl	-316(%rbp), %eax
	cmpl	-280(%rbp), %eax
	jge	LBB0_7
## BB#5:                                ##   in Loop: Header=BB0_4 Depth=1
	movslq	-316(%rbp), %rax
	movq	-312(%rbp), %rcx
	movsbl	(%rcx,%rax), %edx
	subl	$48, %edx
	movslq	%edx, %rax
	movq	-296(%rbp), %rcx
	movl	(%rcx,%rax,4), %edx
	addl	$1, %edx
	movl	%edx, (%rcx,%rax,4)
## BB#6:                                ##   in Loop: Header=BB0_4 Depth=1
	movl	-316(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -316(%rbp)
	jmp	LBB0_4
LBB0_7:
	movl	$0, -320(%rbp)
	movl	$100000, -324(%rbp)     ## imm = 0x186A0
	movl	$1, -328(%rbp)
LBB0_8:                                 ## =>This Inner Loop Header: Depth=1
	movl	-328(%rbp), %eax
	cmpl	-284(%rbp), %eax
	jge	LBB0_17
## BB#9:                                ##   in Loop: Header=BB0_8 Depth=1
	leaq	-120(%rbp), %rax
	leaq	-320(%rbp), %rcx
	movslq	-328(%rbp), %rdx
	movq	-296(%rbp), %rsi
	shlq	$2, %rdx
	addq	%rdx, %rsi
	movq	%rcx, -128(%rbp)
	movq	%rsi, -136(%rbp)
	movq	-128(%rbp), %rcx
	movq	-136(%rbp), %rdx
	movq	%rcx, -104(%rbp)
	movq	%rdx, -112(%rbp)
	movq	-104(%rbp), %rcx
	movq	-112(%rbp), %rdx
	movq	%rax, -80(%rbp)
	movq	%rcx, -88(%rbp)
	movq	%rdx, -96(%rbp)
	movq	-88(%rbp), %rax
	movl	(%rax), %edi
	movq	-96(%rbp), %rax
	cmpl	(%rax), %edi
	jge	LBB0_11
## BB#10:                               ##   in Loop: Header=BB0_8 Depth=1
	movq	-112(%rbp), %rax
	movq	%rax, -360(%rbp)        ## 8-byte Spill
	jmp	LBB0_12
LBB0_11:                                ##   in Loop: Header=BB0_8 Depth=1
	movq	-104(%rbp), %rax
	movq	%rax, -360(%rbp)        ## 8-byte Spill
LBB0_12:                                ## %_ZNSt3__13maxIiEERKT_S3_S3_.exit
                                        ##   in Loop: Header=BB0_8 Depth=1
	movq	-360(%rbp), %rax        ## 8-byte Reload
	leaq	-48(%rbp), %rcx
	leaq	-324(%rbp), %rdx
	movl	(%rax), %esi
	movl	%esi, -320(%rbp)
	movslq	-328(%rbp), %rax
	movq	-296(%rbp), %rdi
	shlq	$2, %rax
	addq	%rax, %rdi
	movq	%rdx, -56(%rbp)
	movq	%rdi, -64(%rbp)
	movq	-56(%rbp), %rax
	movq	-64(%rbp), %rdx
	movq	%rax, -32(%rbp)
	movq	%rdx, -40(%rbp)
	movq	-40(%rbp), %rax
	movq	-32(%rbp), %rdx
	movq	%rcx, -8(%rbp)
	movq	%rax, -16(%rbp)
	movq	%rdx, -24(%rbp)
	movq	-16(%rbp), %rax
	movl	(%rax), %esi
	movq	-24(%rbp), %rax
	cmpl	(%rax), %esi
	jge	LBB0_14
## BB#13:                               ##   in Loop: Header=BB0_8 Depth=1
	movq	-40(%rbp), %rax
	movq	%rax, -368(%rbp)        ## 8-byte Spill
	jmp	LBB0_15
LBB0_14:                                ##   in Loop: Header=BB0_8 Depth=1
	movq	-32(%rbp), %rax
	movq	%rax, -368(%rbp)        ## 8-byte Spill
LBB0_15:                                ## %_ZNSt3__13minIiEERKT_S3_S3_.exit
                                        ##   in Loop: Header=BB0_8 Depth=1
	movq	-368(%rbp), %rax        ## 8-byte Reload
	movl	(%rax), %ecx
	movl	%ecx, -324(%rbp)
## BB#16:                               ##   in Loop: Header=BB0_8 Depth=1
	movl	-328(%rbp), %eax
	addl	$1, %eax
	movl	%eax, -328(%rbp)
	jmp	LBB0_8
LBB0_17:
	movq	__ZNSt3__14coutE@GOTPCREL(%rip), %rdi
	movl	-320(%rbp), %esi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi
	leaq	L_.str(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	movl	-324(%rbp), %esi
	movq	%rax, %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEElsEi
	leaq	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_(%rip), %rdi
	movq	%rax, -152(%rbp)
	movq	%rdi, -160(%rbp)
	movq	-152(%rbp), %rdi
	callq	*-160(%rbp)
	movl	-276(%rbp), %esi
	movq	%rax, -376(%rbp)        ## 8-byte Spill
	movl	%esi, %eax
	addq	$384, %rsp              ## imm = 0x180
	popq	%rbp
	ret
	.cfi_endproc

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__1rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_PS4_
	.weak_def_can_be_hidden	__ZNSt3__1rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_PS4_
	.align	4, 0x90
__ZNSt3__1rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_PS4_: ## @_ZNSt3__1rsIcNS_11char_traitsIcEEEERNS_13basic_istreamIT_T0_EES7_PS4_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin1:
	.cfi_lsda 16, Lexception1
## BB#0:
	pushq	%rbp
Ltmp31:
	.cfi_def_cfa_offset 16
Ltmp32:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp33:
	.cfi_def_cfa_register %rbp
	subq	$368, %rsp              ## imm = 0x170
	movq	%rdi, -184(%rbp)
	movq	%rsi, -192(%rbp)
	movq	-184(%rbp), %rsi
Ltmp5:
	leaq	-200(%rbp), %rdi
	xorl	%edx, %edx
	callq	__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEE6sentryC1ERS3_b
Ltmp6:
	jmp	LBB1_1
LBB1_1:
	leaq	-200(%rbp), %rax
	movq	%rax, -176(%rbp)
	movq	-176(%rbp), %rax
	movb	(%rax), %cl
	movb	%cl, -258(%rbp)         ## 1-byte Spill
## BB#2:
	movb	-258(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB1_3
	jmp	LBB1_45
LBB1_3:
	movq	-184(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -168(%rbp)
	movq	-168(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -272(%rbp)        ## 8-byte Spill
## BB#4:
	movq	-272(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -224(%rbp)
	cmpq	$0, -224(%rbp)
	jg	LBB1_7
## BB#5:
	movabsq	$9223372036854775807, %rax ## imm = 0x7FFFFFFFFFFFFFFF
	shrq	$0, %rax
	subq	$1, %rax
	movq	%rax, -224(%rbp)
	jmp	LBB1_7
LBB1_6:
Ltmp22:
	movl	%edx, %ecx
	movq	%rax, -208(%rbp)
	movl	%ecx, -212(%rbp)
	jmp	LBB1_23
LBB1_7:
	movq	$0, -232(%rbp)
	movq	-184(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
Ltmp7:
	leaq	-248(%rbp), %rdi
	movq	%rax, %rsi
	callq	__ZNKSt3__18ios_base6getlocEv
Ltmp8:
	jmp	LBB1_8
LBB1_8:
	leaq	-248(%rbp), %rax
	movq	%rax, -88(%rbp)
Ltmp9:
	movq	__ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNKSt3__16locale9use_facetERNS0_2idE
Ltmp10:
	movq	%rax, -280(%rbp)        ## 8-byte Spill
	jmp	LBB1_9
LBB1_9:                                 ## %_ZNSt3__19use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE.exit
	movq	-280(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -288(%rbp)        ## 8-byte Spill
## BB#10:
Ltmp14:
	leaq	-248(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
Ltmp15:
	jmp	LBB1_11
LBB1_11:
	movq	-288(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -240(%rbp)
	movl	$0, -252(%rbp)
LBB1_12:                                ## =>This Inner Loop Header: Depth=1
	movq	-232(%rbp), %rax
	movq	-224(%rbp), %rcx
	subq	$1, %rcx
	cmpq	%rcx, %rax
	jge	LBB1_39
## BB#13:                               ##   in Loop: Header=BB1_12 Depth=1
	movq	-184(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -80(%rbp)
	movq	-80(%rbp), %rax
	movq	%rax, -72(%rbp)
	movq	-72(%rbp), %rax
	movq	40(%rax), %rax
	movq	%rax, -296(%rbp)        ## 8-byte Spill
## BB#14:                               ##   in Loop: Header=BB1_12 Depth=1
	movq	-296(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	24(%rcx), %rdx
	cmpq	32(%rcx), %rdx
	movq	%rcx, -304(%rbp)        ## 8-byte Spill
	jne	LBB1_17
## BB#15:                               ##   in Loop: Header=BB1_12 Depth=1
	movq	-304(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	72(%rcx), %rcx
Ltmp16:
	movq	%rax, %rdi
	callq	*%rcx
Ltmp17:
	movl	%eax, -308(%rbp)        ## 4-byte Spill
	jmp	LBB1_16
LBB1_16:                                ## %.noexc2
                                        ##   in Loop: Header=BB1_12 Depth=1
	movl	-308(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -20(%rbp)
	jmp	LBB1_18
LBB1_17:                                ##   in Loop: Header=BB1_12 Depth=1
	movq	-304(%rbp), %rax        ## 8-byte Reload
	movq	24(%rax), %rcx
	movb	(%rcx), %dl
	movb	%dl, -13(%rbp)
	movzbl	-13(%rbp), %esi
	movl	%esi, -20(%rbp)
LBB1_18:                                ## %_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sgetcEv.exit
                                        ##   in Loop: Header=BB1_12 Depth=1
	movl	-20(%rbp), %eax
	movl	%eax, -312(%rbp)        ## 4-byte Spill
## BB#19:                               ##   in Loop: Header=BB1_12 Depth=1
	movl	-312(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -256(%rbp)
	movl	-256(%rbp), %ecx
	movl	%ecx, -4(%rbp)
	movl	$-1, -8(%rbp)
	movl	-4(%rbp), %ecx
	cmpl	-8(%rbp), %ecx
	jne	LBB1_26
## BB#20:
	movl	-252(%rbp), %eax
	orl	$2, %eax
	movl	%eax, -252(%rbp)
	jmp	LBB1_39
LBB1_21:
Ltmp11:
	movl	%edx, %ecx
	movq	%rax, -208(%rbp)
	movl	%ecx, -212(%rbp)
Ltmp12:
	leaq	-248(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
Ltmp13:
	jmp	LBB1_22
LBB1_22:
	jmp	LBB1_23
LBB1_23:
	movq	-208(%rbp), %rdi
	callq	___cxa_begin_catch
	movq	-184(%rbp), %rdi
	movq	(%rdi), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rdi
Ltmp23:
	movq	%rax, -320(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv
Ltmp24:
	jmp	LBB1_24
LBB1_24:
	callq	___cxa_end_catch
LBB1_25:
	movq	-184(%rbp), %rax
	addq	$368, %rsp              ## imm = 0x170
	popq	%rbp
	ret
LBB1_26:                                ##   in Loop: Header=BB1_12 Depth=1
	movl	-256(%rbp), %eax
	movl	%eax, -12(%rbp)
	movl	-12(%rbp), %eax
	movb	%al, %cl
	movb	%cl, -257(%rbp)
	movq	-240(%rbp), %rdx
	movb	-257(%rbp), %cl
	movq	%rdx, -40(%rbp)
	movl	$16384, -44(%rbp)       ## imm = 0x4000
	movb	%cl, -45(%rbp)
	movq	-40(%rbp), %rdx
	movsbl	-45(%rbp), %edi
	movq	%rdx, -328(%rbp)        ## 8-byte Spill
	callq	__Z7isasciii
	cmpl	$0, %eax
	je	LBB1_28
## BB#27:                               ##   in Loop: Header=BB1_12 Depth=1
	movsbl	-45(%rbp), %eax
	movslq	%eax, %rcx
	movq	-328(%rbp), %rdx        ## 8-byte Reload
	movq	16(%rdx), %rsi
	movl	(%rsi,%rcx,4), %eax
	andl	-44(%rbp), %eax
	cmpl	$0, %eax
	setne	%dil
	movb	%dil, -329(%rbp)        ## 1-byte Spill
	jmp	LBB1_29
LBB1_28:                                ##   in Loop: Header=BB1_12 Depth=1
	movb	$0, %al
	movb	%al, -329(%rbp)         ## 1-byte Spill
	jmp	LBB1_29
LBB1_29:                                ## %_ZNKSt3__15ctypeIcE2isEjc.exit
                                        ##   in Loop: Header=BB1_12 Depth=1
	movb	-329(%rbp), %al         ## 1-byte Reload
	movb	%al, -330(%rbp)         ## 1-byte Spill
## BB#30:                               ##   in Loop: Header=BB1_12 Depth=1
	movb	-330(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB1_31
	jmp	LBB1_32
LBB1_31:
	jmp	LBB1_39
LBB1_32:                                ##   in Loop: Header=BB1_12 Depth=1
	movb	-257(%rbp), %al
	movq	-192(%rbp), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, -192(%rbp)
	movb	%al, (%rcx)
	movq	-232(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -232(%rbp)
	movq	-184(%rbp), %rcx
	movq	(%rcx), %rdx
	movq	-24(%rdx), %rdx
	addq	%rdx, %rcx
	movq	%rcx, -64(%rbp)
	movq	-64(%rbp), %rcx
	movq	%rcx, -56(%rbp)
	movq	-56(%rbp), %rcx
	movq	40(%rcx), %rcx
	movq	%rcx, -344(%rbp)        ## 8-byte Spill
## BB#33:                               ##   in Loop: Header=BB1_12 Depth=1
	movq	-344(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	24(%rcx), %rdx
	cmpq	32(%rcx), %rdx
	movq	%rcx, -352(%rbp)        ## 8-byte Spill
	jne	LBB1_36
## BB#34:                               ##   in Loop: Header=BB1_12 Depth=1
	movq	-352(%rbp), %rax        ## 8-byte Reload
	movq	(%rax), %rcx
	movq	80(%rcx), %rcx
Ltmp18:
	movq	%rax, %rdi
	callq	*%rcx
Ltmp19:
	movl	%eax, -356(%rbp)        ## 4-byte Spill
	jmp	LBB1_35
LBB1_35:                                ## %.noexc
                                        ##   in Loop: Header=BB1_12 Depth=1
	movl	-356(%rbp), %eax        ## 4-byte Reload
	movl	%eax, -96(%rbp)
	jmp	LBB1_37
LBB1_36:                                ##   in Loop: Header=BB1_12 Depth=1
	movq	-352(%rbp), %rax        ## 8-byte Reload
	movq	24(%rax), %rcx
	movq	%rcx, %rdx
	addq	$1, %rdx
	movq	%rdx, 24(%rax)
	movb	(%rcx), %sil
	movb	%sil, -89(%rbp)
	movzbl	-89(%rbp), %edi
	movl	%edi, -96(%rbp)
LBB1_37:                                ## %_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6sbumpcEv.exit
                                        ##   in Loop: Header=BB1_12 Depth=1
## BB#38:                               ##   in Loop: Header=BB1_12 Depth=1
	jmp	LBB1_12
LBB1_39:
	movq	-192(%rbp), %rax
	movb	$0, (%rax)
	movq	-184(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -112(%rbp)
	movq	$0, -120(%rbp)
	movq	-112(%rbp), %rax
	movq	24(%rax), %rcx
	movq	%rcx, -128(%rbp)
	movq	-120(%rbp), %rcx
	movq	%rcx, 24(%rax)
## BB#40:
	cmpq	$0, -232(%rbp)
	jne	LBB1_42
## BB#41:
	movl	-252(%rbp), %eax
	orl	$4, %eax
	movl	%eax, -252(%rbp)
LBB1_42:
	movq	-184(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
	movl	-252(%rbp), %edx
	movq	%rax, -152(%rbp)
	movl	%edx, -156(%rbp)
	movq	-152(%rbp), %rax
	movq	%rax, -136(%rbp)
	movl	%edx, -140(%rbp)
	movq	-136(%rbp), %rax
	movl	32(%rax), %esi
	orl	%edx, %esi
Ltmp20:
	movq	%rax, %rdi
	callq	__ZNSt3__18ios_base5clearEj
Ltmp21:
	jmp	LBB1_43
LBB1_43:                                ## %_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE8setstateEj.exit
	jmp	LBB1_44
LBB1_44:
	jmp	LBB1_45
LBB1_45:
	jmp	LBB1_25
LBB1_46:
Ltmp25:
	movl	%edx, %ecx
	movq	%rax, -208(%rbp)
	movl	%ecx, -212(%rbp)
Ltmp26:
	callq	___cxa_end_catch
Ltmp27:
	jmp	LBB1_47
LBB1_47:
	jmp	LBB1_48
LBB1_48:
	movq	-208(%rbp), %rdi
	callq	__Unwind_Resume
LBB1_49:
Ltmp28:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -360(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end1:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table1:
Lexception1:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\213\201"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.ascii	"\202\001"              ## Call site table length
Lset0 = Ltmp5-Leh_func_begin1           ## >> Call Site 1 <<
	.long	Lset0
Lset1 = Ltmp8-Ltmp5                     ##   Call between Ltmp5 and Ltmp8
	.long	Lset1
Lset2 = Ltmp22-Leh_func_begin1          ##     jumps to Ltmp22
	.long	Lset2
	.byte	1                       ##   On action: 1
Lset3 = Ltmp9-Leh_func_begin1           ## >> Call Site 2 <<
	.long	Lset3
Lset4 = Ltmp10-Ltmp9                    ##   Call between Ltmp9 and Ltmp10
	.long	Lset4
Lset5 = Ltmp11-Leh_func_begin1          ##     jumps to Ltmp11
	.long	Lset5
	.byte	1                       ##   On action: 1
Lset6 = Ltmp14-Leh_func_begin1          ## >> Call Site 3 <<
	.long	Lset6
Lset7 = Ltmp17-Ltmp14                   ##   Call between Ltmp14 and Ltmp17
	.long	Lset7
Lset8 = Ltmp22-Leh_func_begin1          ##     jumps to Ltmp22
	.long	Lset8
	.byte	1                       ##   On action: 1
Lset9 = Ltmp12-Leh_func_begin1          ## >> Call Site 4 <<
	.long	Lset9
Lset10 = Ltmp13-Ltmp12                  ##   Call between Ltmp12 and Ltmp13
	.long	Lset10
Lset11 = Ltmp28-Leh_func_begin1         ##     jumps to Ltmp28
	.long	Lset11
	.byte	1                       ##   On action: 1
Lset12 = Ltmp13-Leh_func_begin1         ## >> Call Site 5 <<
	.long	Lset12
Lset13 = Ltmp23-Ltmp13                  ##   Call between Ltmp13 and Ltmp23
	.long	Lset13
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset14 = Ltmp23-Leh_func_begin1         ## >> Call Site 6 <<
	.long	Lset14
Lset15 = Ltmp24-Ltmp23                  ##   Call between Ltmp23 and Ltmp24
	.long	Lset15
Lset16 = Ltmp25-Leh_func_begin1         ##     jumps to Ltmp25
	.long	Lset16
	.byte	0                       ##   On action: cleanup
Lset17 = Ltmp24-Leh_func_begin1         ## >> Call Site 7 <<
	.long	Lset17
Lset18 = Ltmp18-Ltmp24                  ##   Call between Ltmp24 and Ltmp18
	.long	Lset18
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset19 = Ltmp18-Leh_func_begin1         ## >> Call Site 8 <<
	.long	Lset19
Lset20 = Ltmp21-Ltmp18                  ##   Call between Ltmp18 and Ltmp21
	.long	Lset20
Lset21 = Ltmp22-Leh_func_begin1         ##     jumps to Ltmp22
	.long	Lset21
	.byte	1                       ##   On action: 1
Lset22 = Ltmp26-Leh_func_begin1         ## >> Call Site 9 <<
	.long	Lset22
Lset23 = Ltmp27-Ltmp26                  ##   Call between Ltmp26 and Ltmp27
	.long	Lset23
Lset24 = Ltmp28-Leh_func_begin1         ##     jumps to Ltmp28
	.long	Lset24
	.byte	1                       ##   On action: 1
Lset25 = Ltmp27-Leh_func_begin1         ## >> Call Site 10 <<
	.long	Lset25
Lset26 = Leh_func_end1-Ltmp27           ##   Call between Ltmp27 and Leh_func_end1
	.long	Lset26
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.weak_def_can_be_hidden	__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.align	4, 0x90
__ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc: ## @_ZNSt3__1lsINS_11char_traitsIcEEEERNS_13basic_ostreamIcT_EES6_PKc
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin2:
	.cfi_lsda 16, Lexception2
## BB#0:
	pushq	%rbp
Ltmp68:
	.cfi_def_cfa_offset 16
Ltmp69:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp70:
	.cfi_def_cfa_register %rbp
	subq	$432, %rsp              ## imm = 0x1B0
	movq	%rdi, -216(%rbp)
	movq	%rsi, -224(%rbp)
	movq	-216(%rbp), %rsi
Ltmp34:
	leaq	-240(%rbp), %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryC1ERS3_
Ltmp35:
	jmp	LBB2_1
LBB2_1:
	leaq	-240(%rbp), %rax
	movq	%rax, -208(%rbp)
	movq	-208(%rbp), %rax
	movb	(%rax), %cl
	movb	%cl, -281(%rbp)         ## 1-byte Spill
## BB#2:
	movb	-281(%rbp), %al         ## 1-byte Reload
	testb	$1, %al
	jne	LBB2_3
	jmp	LBB2_28
LBB2_3:
	movq	-224(%rbp), %rax
	movq	%rax, -200(%rbp)
Ltmp36:
	movq	%rax, %rdi
	callq	_strlen
Ltmp37:
	movq	%rax, -296(%rbp)        ## 8-byte Spill
	jmp	LBB2_4
LBB2_4:                                 ## %_ZNSt3__111char_traitsIcE6lengthEPKc.exit
	jmp	LBB2_5
LBB2_5:
	leaq	-272(%rbp), %rax
	movq	-296(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -264(%rbp)
	movq	-216(%rbp), %rdx
	movq	%rax, -184(%rbp)
	movq	%rdx, -192(%rbp)
	movq	-184(%rbp), %rax
	movq	-192(%rbp), %rdx
	movq	%rax, -152(%rbp)
	movq	%rdx, -160(%rbp)
	movq	-152(%rbp), %rax
	movq	-160(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	-24(%rsi), %rsi
	addq	%rsi, %rdx
	movq	%rdx, -144(%rbp)
	movq	-144(%rbp), %rdx
	movq	%rdx, -136(%rbp)
	movq	-136(%rbp), %rdx
	movq	40(%rdx), %rdx
	movq	%rdx, (%rax)
	movq	-224(%rbp), %rsi
	movq	-216(%rbp), %rax
	movq	(%rax), %rdx
	movq	-24(%rdx), %rdx
	addq	%rdx, %rax
	movq	%rax, -96(%rbp)
	movq	-96(%rbp), %rax
	movl	8(%rax), %edi
	movq	%rsi, -304(%rbp)        ## 8-byte Spill
	movl	%edi, -308(%rbp)        ## 4-byte Spill
## BB#6:
	movl	-308(%rbp), %eax        ## 4-byte Reload
	andl	$176, %eax
	cmpl	$32, %eax
	jne	LBB2_8
## BB#7:
	movq	-224(%rbp), %rax
	addq	-264(%rbp), %rax
	movq	%rax, -320(%rbp)        ## 8-byte Spill
	jmp	LBB2_9
LBB2_8:
	movq	-224(%rbp), %rax
	movq	%rax, -320(%rbp)        ## 8-byte Spill
LBB2_9:
	movq	-320(%rbp), %rax        ## 8-byte Reload
	movq	-224(%rbp), %rcx
	addq	-264(%rbp), %rcx
	movq	-216(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	-24(%rsi), %rsi
	addq	%rsi, %rdx
	movq	-216(%rbp), %rsi
	movq	(%rsi), %rdi
	movq	-24(%rdi), %rdi
	addq	%rdi, %rsi
	movq	%rsi, -80(%rbp)
	movq	-80(%rbp), %rsi
	movl	144(%rsi), %r8d
	movl	$-1, -4(%rbp)
	movl	%r8d, -8(%rbp)
	movl	-4(%rbp), %r8d
	cmpl	-8(%rbp), %r8d
	movq	%rax, -328(%rbp)        ## 8-byte Spill
	movq	%rcx, -336(%rbp)        ## 8-byte Spill
	movq	%rdx, -344(%rbp)        ## 8-byte Spill
	movq	%rsi, -352(%rbp)        ## 8-byte Spill
	jne	LBB2_18
## BB#10:
	movq	-352(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -40(%rbp)
	movb	$32, -41(%rbp)
	movq	-40(%rbp), %rsi
Ltmp38:
	leaq	-56(%rbp), %rdi
	callq	__ZNKSt3__18ios_base6getlocEv
Ltmp39:
	jmp	LBB2_11
LBB2_11:                                ## %.noexc
	leaq	-56(%rbp), %rax
	movq	%rax, -32(%rbp)
Ltmp40:
	movq	__ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNKSt3__16locale9use_facetERNS0_2idE
Ltmp41:
	movq	%rax, -360(%rbp)        ## 8-byte Spill
	jmp	LBB2_12
LBB2_12:                                ## %_ZNSt3__19use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE.exit.i.i
	movb	-41(%rbp), %al
	movq	-360(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -16(%rbp)
	movb	%al, -17(%rbp)
	movq	-16(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	56(%rsi), %rsi
	movsbl	-17(%rbp), %edi
Ltmp42:
	movl	%edi, -364(%rbp)        ## 4-byte Spill
	movq	%rdx, %rdi
	movl	-364(%rbp), %r8d        ## 4-byte Reload
	movq	%rsi, -376(%rbp)        ## 8-byte Spill
	movl	%r8d, %esi
	movq	-376(%rbp), %rdx        ## 8-byte Reload
	callq	*%rdx
Ltmp43:
	movb	%al, -377(%rbp)         ## 1-byte Spill
	jmp	LBB2_16
LBB2_13:
Ltmp44:
	movl	%edx, %ecx
	movq	%rax, -64(%rbp)
	movl	%ecx, -68(%rbp)
Ltmp45:
	leaq	-56(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
Ltmp46:
	jmp	LBB2_14
LBB2_14:
	movq	-64(%rbp), %rax
	movl	-68(%rbp), %ecx
	movq	%rax, -392(%rbp)        ## 8-byte Spill
	movl	%ecx, -396(%rbp)        ## 4-byte Spill
	jmp	LBB2_26
LBB2_15:
Ltmp47:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -400(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
LBB2_16:                                ## %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenEc.exit.i
Ltmp48:
	leaq	-56(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
Ltmp49:
	jmp	LBB2_17
LBB2_17:                                ## %.noexc1
	movb	-377(%rbp), %al         ## 1-byte Reload
	movsbl	%al, %ecx
	movq	-352(%rbp), %rdx        ## 8-byte Reload
	movl	%ecx, 144(%rdx)
LBB2_18:                                ## %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE4fillEv.exit
	movq	-352(%rbp), %rax        ## 8-byte Reload
	movl	144(%rax), %ecx
	movb	%cl, %dl
	movb	%dl, -401(%rbp)         ## 1-byte Spill
## BB#19:
	movq	-272(%rbp), %rdi
Ltmp50:
	movb	-401(%rbp), %al         ## 1-byte Reload
	movsbl	%al, %r9d
	movq	-304(%rbp), %rsi        ## 8-byte Reload
	movq	-328(%rbp), %rdx        ## 8-byte Reload
	movq	-336(%rbp), %rcx        ## 8-byte Reload
	movq	-344(%rbp), %r8         ## 8-byte Reload
	callq	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
Ltmp51:
	movq	%rax, -416(%rbp)        ## 8-byte Spill
	jmp	LBB2_20
LBB2_20:
	leaq	-280(%rbp), %rax
	movq	-416(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -280(%rbp)
	movq	%rax, -88(%rbp)
	movq	-88(%rbp), %rax
	cmpq	$0, (%rax)
	jne	LBB2_27
## BB#21:
	movq	-216(%rbp), %rax
	movq	(%rax), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rax
	movq	%rax, -120(%rbp)
	movl	$5, -124(%rbp)
	movq	-120(%rbp), %rax
	movq	%rax, -104(%rbp)
	movl	$5, -108(%rbp)
	movq	-104(%rbp), %rax
	movl	32(%rax), %edx
	orl	$5, %edx
Ltmp52:
	movq	%rax, %rdi
	movl	%edx, %esi
	callq	__ZNSt3__18ios_base5clearEj
Ltmp53:
	jmp	LBB2_22
LBB2_22:                                ## %_ZNSt3__19basic_iosIcNS_11char_traitsIcEEE8setstateEj.exit
	jmp	LBB2_23
LBB2_23:
	jmp	LBB2_27
LBB2_24:
Ltmp59:
	movl	%edx, %ecx
	movq	%rax, -248(%rbp)
	movl	%ecx, -252(%rbp)
	jmp	LBB2_31
LBB2_25:
Ltmp54:
	movl	%edx, %ecx
	movq	%rax, -392(%rbp)        ## 8-byte Spill
	movl	%ecx, -396(%rbp)        ## 4-byte Spill
LBB2_26:                                ## %.body
	movl	-396(%rbp), %eax        ## 4-byte Reload
	movq	-392(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -248(%rbp)
	movl	%eax, -252(%rbp)
Ltmp55:
	leaq	-240(%rbp), %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev
Ltmp56:
	jmp	LBB2_30
LBB2_27:
	jmp	LBB2_28
LBB2_28:
Ltmp57:
	leaq	-240(%rbp), %rdi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD1Ev
Ltmp58:
	jmp	LBB2_29
LBB2_29:
	jmp	LBB2_33
LBB2_30:
	jmp	LBB2_31
LBB2_31:
	movq	-248(%rbp), %rdi
	callq	___cxa_begin_catch
	movq	-216(%rbp), %rdi
	movq	(%rdi), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rdi
Ltmp60:
	movq	%rax, -424(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv
Ltmp61:
	jmp	LBB2_32
LBB2_32:
	callq	___cxa_end_catch
LBB2_33:
	movq	-216(%rbp), %rax
	addq	$432, %rsp              ## imm = 0x1B0
	popq	%rbp
	ret
LBB2_34:
Ltmp62:
	movl	%edx, %ecx
	movq	%rax, -248(%rbp)
	movl	%ecx, -252(%rbp)
Ltmp63:
	callq	___cxa_end_catch
Ltmp64:
	jmp	LBB2_35
LBB2_35:
	jmp	LBB2_36
LBB2_36:
	movq	-248(%rbp), %rdi
	callq	__Unwind_Resume
LBB2_37:
Ltmp65:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -428(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
	.cfi_endproc
Leh_func_end2:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table2:
Lexception2:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\253\201"              ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.ascii	"\234\001"              ## Call site table length
Lset27 = Ltmp34-Leh_func_begin2         ## >> Call Site 1 <<
	.long	Lset27
Lset28 = Ltmp35-Ltmp34                  ##   Call between Ltmp34 and Ltmp35
	.long	Lset28
Lset29 = Ltmp59-Leh_func_begin2         ##     jumps to Ltmp59
	.long	Lset29
	.byte	5                       ##   On action: 3
Lset30 = Ltmp36-Leh_func_begin2         ## >> Call Site 2 <<
	.long	Lset30
Lset31 = Ltmp39-Ltmp36                  ##   Call between Ltmp36 and Ltmp39
	.long	Lset31
Lset32 = Ltmp54-Leh_func_begin2         ##     jumps to Ltmp54
	.long	Lset32
	.byte	5                       ##   On action: 3
Lset33 = Ltmp40-Leh_func_begin2         ## >> Call Site 3 <<
	.long	Lset33
Lset34 = Ltmp43-Ltmp40                  ##   Call between Ltmp40 and Ltmp43
	.long	Lset34
Lset35 = Ltmp44-Leh_func_begin2         ##     jumps to Ltmp44
	.long	Lset35
	.byte	3                       ##   On action: 2
Lset36 = Ltmp45-Leh_func_begin2         ## >> Call Site 4 <<
	.long	Lset36
Lset37 = Ltmp46-Ltmp45                  ##   Call between Ltmp45 and Ltmp46
	.long	Lset37
Lset38 = Ltmp47-Leh_func_begin2         ##     jumps to Ltmp47
	.long	Lset38
	.byte	7                       ##   On action: 4
Lset39 = Ltmp48-Leh_func_begin2         ## >> Call Site 5 <<
	.long	Lset39
Lset40 = Ltmp53-Ltmp48                  ##   Call between Ltmp48 and Ltmp53
	.long	Lset40
Lset41 = Ltmp54-Leh_func_begin2         ##     jumps to Ltmp54
	.long	Lset41
	.byte	5                       ##   On action: 3
Lset42 = Ltmp55-Leh_func_begin2         ## >> Call Site 6 <<
	.long	Lset42
Lset43 = Ltmp56-Ltmp55                  ##   Call between Ltmp55 and Ltmp56
	.long	Lset43
Lset44 = Ltmp65-Leh_func_begin2         ##     jumps to Ltmp65
	.long	Lset44
	.byte	5                       ##   On action: 3
Lset45 = Ltmp57-Leh_func_begin2         ## >> Call Site 7 <<
	.long	Lset45
Lset46 = Ltmp58-Ltmp57                  ##   Call between Ltmp57 and Ltmp58
	.long	Lset46
Lset47 = Ltmp59-Leh_func_begin2         ##     jumps to Ltmp59
	.long	Lset47
	.byte	5                       ##   On action: 3
Lset48 = Ltmp58-Leh_func_begin2         ## >> Call Site 8 <<
	.long	Lset48
Lset49 = Ltmp60-Ltmp58                  ##   Call between Ltmp58 and Ltmp60
	.long	Lset49
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset50 = Ltmp60-Leh_func_begin2         ## >> Call Site 9 <<
	.long	Lset50
Lset51 = Ltmp61-Ltmp60                  ##   Call between Ltmp60 and Ltmp61
	.long	Lset51
Lset52 = Ltmp62-Leh_func_begin2         ##     jumps to Ltmp62
	.long	Lset52
	.byte	0                       ##   On action: cleanup
Lset53 = Ltmp61-Leh_func_begin2         ## >> Call Site 10 <<
	.long	Lset53
Lset54 = Ltmp63-Ltmp61                  ##   Call between Ltmp61 and Ltmp63
	.long	Lset54
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset55 = Ltmp63-Leh_func_begin2         ## >> Call Site 11 <<
	.long	Lset55
Lset56 = Ltmp64-Ltmp63                  ##   Call between Ltmp63 and Ltmp64
	.long	Lset56
Lset57 = Ltmp65-Leh_func_begin2         ##     jumps to Ltmp65
	.long	Lset57
	.byte	5                       ##   On action: 3
Lset58 = Ltmp64-Leh_func_begin2         ## >> Call Site 12 <<
	.long	Lset58
Lset59 = Leh_func_end2-Ltmp64           ##   Call between Ltmp64 and Leh_func_end2
	.long	Lset59
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	0                       ## >> Action Record 1 <<
                                        ##   Cleanup
	.byte	0                       ##   No further actions
	.byte	1                       ## >> Action Record 2 <<
                                        ##   Catch TypeInfo 1
	.byte	125                     ##   Continue to action 1
	.byte	1                       ## >> Action Record 3 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
	.byte	1                       ## >> Action Record 4 <<
                                        ##   Catch TypeInfo 1
	.byte	125                     ##   Continue to action 3
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.private_extern	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.globl	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.weak_definition	__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.align	4, 0x90
__ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_: ## @_ZNSt3__14endlIcNS_11char_traitsIcEEEERNS_13basic_ostreamIT_T0_EES7_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin3:
	.cfi_lsda 16, Lexception3
## BB#0:
	pushq	%rbp
Ltmp81:
	.cfi_def_cfa_offset 16
Ltmp82:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp83:
	.cfi_def_cfa_register %rbp
	subq	$144, %rsp
	movq	%rdi, -72(%rbp)
	movq	%rdi, %rax
	movq	(%rdi), %rcx
	movq	-24(%rcx), %rcx
	addq	%rcx, %rdi
	movq	%rdi, -32(%rbp)
	movb	$10, -33(%rbp)
	movq	-32(%rbp), %rsi
	leaq	-48(%rbp), %rcx
	movq	%rcx, %rdi
	movq	%rax, -80(%rbp)         ## 8-byte Spill
	movq	%rcx, -88(%rbp)         ## 8-byte Spill
	callq	__ZNKSt3__18ios_base6getlocEv
	movq	-88(%rbp), %rax         ## 8-byte Reload
	movq	%rax, -24(%rbp)
Ltmp71:
	movq	__ZNSt3__15ctypeIcE2idE@GOTPCREL(%rip), %rsi
	movq	%rax, %rdi
	callq	__ZNKSt3__16locale9use_facetERNS0_2idE
Ltmp72:
	movq	%rax, -96(%rbp)         ## 8-byte Spill
	jmp	LBB3_1
LBB3_1:                                 ## %_ZNSt3__19use_facetINS_5ctypeIcEEEERKT_RKNS_6localeE.exit.i
	movb	-33(%rbp), %al
	movq	-96(%rbp), %rcx         ## 8-byte Reload
	movq	%rcx, -8(%rbp)
	movb	%al, -9(%rbp)
	movq	-8(%rbp), %rdx
	movq	(%rdx), %rsi
	movq	56(%rsi), %rsi
	movsbl	-9(%rbp), %edi
Ltmp73:
	movl	%edi, -100(%rbp)        ## 4-byte Spill
	movq	%rdx, %rdi
	movl	-100(%rbp), %r8d        ## 4-byte Reload
	movq	%rsi, -112(%rbp)        ## 8-byte Spill
	movl	%r8d, %esi
	movq	-112(%rbp), %rdx        ## 8-byte Reload
	callq	*%rdx
Ltmp74:
	movb	%al, -113(%rbp)         ## 1-byte Spill
	jmp	LBB3_5
LBB3_2:
Ltmp75:
	movl	%edx, %ecx
	movq	%rax, -56(%rbp)
	movl	%ecx, -60(%rbp)
Ltmp76:
	leaq	-48(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
Ltmp77:
	jmp	LBB3_3
LBB3_3:
	movq	-56(%rbp), %rdi
	callq	__Unwind_Resume
LBB3_4:
Ltmp78:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -120(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
LBB3_5:                                 ## %_ZNKSt3__19basic_iosIcNS_11char_traitsIcEEE5widenEc.exit
	leaq	-48(%rbp), %rdi
	callq	__ZNSt3__16localeD1Ev
	movq	-80(%rbp), %rdi         ## 8-byte Reload
	movb	-113(%rbp), %al         ## 1-byte Reload
	movsbl	%al, %esi
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE3putEc
	movq	-72(%rbp), %rdi
	movq	%rax, -128(%rbp)        ## 8-byte Spill
	callq	__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv
	movq	-72(%rbp), %rdi
	movq	%rax, -136(%rbp)        ## 8-byte Spill
	movq	%rdi, %rax
	addq	$144, %rsp
	popq	%rbp
	ret
	.cfi_endproc
Leh_func_end3:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table3:
Lexception3:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\274"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset60 = Leh_func_begin3-Leh_func_begin3 ## >> Call Site 1 <<
	.long	Lset60
Lset61 = Ltmp71-Leh_func_begin3         ##   Call between Leh_func_begin3 and Ltmp71
	.long	Lset61
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset62 = Ltmp71-Leh_func_begin3         ## >> Call Site 2 <<
	.long	Lset62
Lset63 = Ltmp74-Ltmp71                  ##   Call between Ltmp71 and Ltmp74
	.long	Lset63
Lset64 = Ltmp75-Leh_func_begin3         ##     jumps to Ltmp75
	.long	Lset64
	.byte	0                       ##   On action: cleanup
Lset65 = Ltmp76-Leh_func_begin3         ## >> Call Site 3 <<
	.long	Lset65
Lset66 = Ltmp77-Ltmp76                  ##   Call between Ltmp76 and Ltmp77
	.long	Lset66
Lset67 = Ltmp78-Leh_func_begin3         ##     jumps to Ltmp78
	.long	Lset67
	.byte	1                       ##   On action: 1
Lset68 = Ltmp77-Leh_func_begin3         ## >> Call Site 4 <<
	.long	Lset68
Lset69 = Leh_func_end3-Ltmp77           ##   Call between Ltmp77 and Leh_func_end3
	.long	Lset69
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.private_extern	___clang_call_terminate
	.globl	___clang_call_terminate
	.weak_def_can_be_hidden	___clang_call_terminate
	.align	4, 0x90
___clang_call_terminate:                ## @__clang_call_terminate
## BB#0:
	pushq	%rbp
	movq	%rsp, %rbp
	subq	$16, %rsp
	callq	___cxa_begin_catch
	movq	%rax, -8(%rbp)          ## 8-byte Spill
	callq	__ZSt9terminatev

	.private_extern	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.globl	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.weak_def_can_be_hidden	__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.align	4, 0x90
__ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_: ## @_ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_
	.cfi_startproc
	.cfi_personality 155, ___gxx_personality_v0
Leh_func_begin5:
	.cfi_lsda 16, Lexception5
## BB#0:
	pushq	%rbp
Ltmp92:
	.cfi_def_cfa_offset 16
Ltmp93:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp94:
	.cfi_def_cfa_register %rbp
	subq	$720, %rsp              ## imm = 0x2D0
	movb	%r9b, %al
	leaq	-552(%rbp), %r10
	leaq	-488(%rbp), %r11
	movq	%rdi, -504(%rbp)
	movq	%rsi, -512(%rbp)
	movq	%rdx, -520(%rbp)
	movq	%rcx, -528(%rbp)
	movq	%r8, -536(%rbp)
	movb	%al, -537(%rbp)
	movq	-504(%rbp), %rcx
	movq	%r11, -472(%rbp)
	movq	$-1, -480(%rbp)
	movq	-472(%rbp), %rdx
	movq	-480(%rbp), %rsi
	movq	%rdx, -456(%rbp)
	movq	%rsi, -464(%rbp)
	movq	-456(%rbp), %rdx
	movq	$0, (%rdx)
	movq	-488(%rbp), %rdx
	movq	%rdx, -552(%rbp)
	movq	%r10, -448(%rbp)
	cmpq	$0, %rcx
	jne	LBB5_2
## BB#1:
	movq	-504(%rbp), %rax
	movq	%rax, -496(%rbp)
	jmp	LBB5_29
LBB5_2:
	movq	-528(%rbp), %rax
	movq	-512(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -560(%rbp)
	movq	-536(%rbp), %rax
	movq	%rax, -344(%rbp)
	movq	-344(%rbp), %rax
	movq	24(%rax), %rax
	movq	%rax, -568(%rbp)
	movq	-568(%rbp), %rax
	cmpq	-560(%rbp), %rax
	jle	LBB5_4
## BB#3:
	movq	-560(%rbp), %rax
	movq	-568(%rbp), %rcx
	subq	%rax, %rcx
	movq	%rcx, -568(%rbp)
	jmp	LBB5_5
LBB5_4:
	movq	$0, -568(%rbp)
LBB5_5:
	movq	-520(%rbp), %rax
	movq	-512(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -576(%rbp)
	cmpq	$0, -576(%rbp)
	jle	LBB5_9
## BB#6:
	movq	-504(%rbp), %rax
	movq	-512(%rbp), %rcx
	movq	-576(%rbp), %rdx
	movq	%rax, -248(%rbp)
	movq	%rcx, -256(%rbp)
	movq	%rdx, -264(%rbp)
	movq	-248(%rbp), %rax
	movq	(%rax), %rcx
	movq	96(%rcx), %rcx
	movq	-256(%rbp), %rsi
	movq	-264(%rbp), %rdx
	movq	%rax, %rdi
	callq	*%rcx
	cmpq	-576(%rbp), %rax
	je	LBB5_8
## BB#7:
	leaq	-584(%rbp), %rax
	leaq	-240(%rbp), %rcx
	movq	%rcx, -224(%rbp)
	movq	$-1, -232(%rbp)
	movq	-224(%rbp), %rcx
	movq	-232(%rbp), %rdx
	movq	%rcx, -208(%rbp)
	movq	%rdx, -216(%rbp)
	movq	-208(%rbp), %rcx
	movq	$0, (%rcx)
	movq	-240(%rbp), %rcx
	movq	%rcx, -584(%rbp)
	movq	%rax, -8(%rbp)
	movq	$0, -504(%rbp)
	movq	-504(%rbp), %rax
	movq	%rax, -496(%rbp)
	jmp	LBB5_29
LBB5_8:
	jmp	LBB5_9
LBB5_9:
	cmpq	$0, -568(%rbp)
	jle	LBB5_24
## BB#10:
	leaq	-608(%rbp), %rax
	movq	-568(%rbp), %rcx
	movb	-537(%rbp), %dl
	movq	%rax, -72(%rbp)
	movq	%rcx, -80(%rbp)
	movb	%dl, -81(%rbp)
	movq	-72(%rbp), %rax
	movq	-80(%rbp), %rcx
	movb	-81(%rbp), %dl
	movq	%rax, -48(%rbp)
	movq	%rcx, -56(%rbp)
	movb	%dl, -57(%rbp)
	movq	-48(%rbp), %rax
	movq	%rax, -40(%rbp)
	movq	-40(%rbp), %rcx
	movq	%rcx, -32(%rbp)
	movq	-32(%rbp), %rcx
	movq	%rcx, -24(%rbp)
	movq	-24(%rbp), %rcx
	movq	%rcx, -16(%rbp)
	movq	-56(%rbp), %rsi
	movq	%rax, %rdi
	movsbl	-57(%rbp), %edx
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEmc
	leaq	-608(%rbp), %rax
	movq	-504(%rbp), %rcx
	movq	%rax, -200(%rbp)
	movq	-200(%rbp), %rax
	movq	%rax, -192(%rbp)
	movq	-192(%rbp), %rax
	movq	%rax, -184(%rbp)
	movq	-184(%rbp), %rsi
	movq	%rsi, -176(%rbp)
	movq	-176(%rbp), %rsi
	movq	%rsi, -168(%rbp)
	movq	-168(%rbp), %rsi
	movzbl	(%rsi), %edx
	andl	$1, %edx
	cmpl	$0, %edx
	movq	%rcx, -656(%rbp)        ## 8-byte Spill
	movq	%rax, -664(%rbp)        ## 8-byte Spill
	je	LBB5_12
## BB#11:
	movq	-664(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -120(%rbp)
	movq	-120(%rbp), %rcx
	movq	%rcx, -112(%rbp)
	movq	-112(%rbp), %rcx
	movq	%rcx, -104(%rbp)
	movq	-104(%rbp), %rcx
	movq	16(%rcx), %rcx
	movq	%rcx, -672(%rbp)        ## 8-byte Spill
	jmp	LBB5_13
LBB5_12:
	movq	-664(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -160(%rbp)
	movq	-160(%rbp), %rcx
	movq	%rcx, -152(%rbp)
	movq	-152(%rbp), %rcx
	movq	%rcx, -144(%rbp)
	movq	-144(%rbp), %rcx
	addq	$1, %rcx
	movq	%rcx, -136(%rbp)
	movq	-136(%rbp), %rcx
	movq	%rcx, -128(%rbp)
	movq	-128(%rbp), %rcx
	movq	%rcx, -672(%rbp)        ## 8-byte Spill
LBB5_13:                                ## %_ZNKSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE4dataEv.exit
	movq	-672(%rbp), %rax        ## 8-byte Reload
	movq	%rax, -96(%rbp)
	movq	-568(%rbp), %rcx
	movq	-656(%rbp), %rdx        ## 8-byte Reload
	movq	%rdx, -272(%rbp)
	movq	%rax, -280(%rbp)
	movq	%rcx, -288(%rbp)
	movq	-272(%rbp), %rax
	movq	(%rax), %rsi
	movq	96(%rsi), %rsi
	movq	-280(%rbp), %rdi
Ltmp84:
	movq	%rdi, -680(%rbp)        ## 8-byte Spill
	movq	%rax, %rdi
	movq	-680(%rbp), %rax        ## 8-byte Reload
	movq	%rsi, -688(%rbp)        ## 8-byte Spill
	movq	%rax, %rsi
	movq	%rcx, %rdx
	movq	-688(%rbp), %rcx        ## 8-byte Reload
	callq	*%rcx
Ltmp85:
	movq	%rax, -696(%rbp)        ## 8-byte Spill
	jmp	LBB5_14
LBB5_14:                                ## %_ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5sputnEPKcl.exit
	jmp	LBB5_15
LBB5_15:
	movq	-696(%rbp), %rax        ## 8-byte Reload
	cmpq	-568(%rbp), %rax
	je	LBB5_20
## BB#16:
	leaq	-328(%rbp), %rax
	movq	%rax, -312(%rbp)
	movq	$-1, -320(%rbp)
	movq	-312(%rbp), %rax
	movq	-320(%rbp), %rcx
	movq	%rax, -296(%rbp)
	movq	%rcx, -304(%rbp)
	movq	-296(%rbp), %rax
	movq	$0, (%rax)
	movq	-328(%rbp), %rax
	movq	%rax, -704(%rbp)        ## 8-byte Spill
## BB#17:
	leaq	-632(%rbp), %rax
	movq	-704(%rbp), %rcx        ## 8-byte Reload
	movq	%rcx, -632(%rbp)
	movq	%rax, -336(%rbp)
## BB#18:
	movq	$0, -504(%rbp)
	movq	-504(%rbp), %rax
	movq	%rax, -496(%rbp)
	movl	$1, -636(%rbp)
	jmp	LBB5_21
LBB5_19:
Ltmp86:
	movl	%edx, %ecx
	movq	%rax, -616(%rbp)
	movl	%ecx, -620(%rbp)
Ltmp87:
	leaq	-608(%rbp), %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
Ltmp88:
	jmp	LBB5_23
LBB5_20:
	movl	$0, -636(%rbp)
LBB5_21:
	leaq	-608(%rbp), %rdi
	callq	__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev
	movl	-636(%rbp), %eax
	movl	%eax, %ecx
	subl	$1, %ecx
	movl	%eax, -708(%rbp)        ## 4-byte Spill
	movl	%ecx, -712(%rbp)        ## 4-byte Spill
	je	LBB5_29
	jmp	LBB5_33
LBB5_33:
	movl	-708(%rbp), %eax        ## 4-byte Reload
	testl	%eax, %eax
	jne	LBB5_32
	jmp	LBB5_22
LBB5_22:
	jmp	LBB5_24
LBB5_23:
	jmp	LBB5_30
LBB5_24:
	movq	-528(%rbp), %rax
	movq	-520(%rbp), %rcx
	subq	%rcx, %rax
	movq	%rax, -576(%rbp)
	cmpq	$0, -576(%rbp)
	jle	LBB5_28
## BB#25:
	movq	-504(%rbp), %rax
	movq	-520(%rbp), %rcx
	movq	-576(%rbp), %rdx
	movq	%rax, -352(%rbp)
	movq	%rcx, -360(%rbp)
	movq	%rdx, -368(%rbp)
	movq	-352(%rbp), %rax
	movq	(%rax), %rcx
	movq	96(%rcx), %rcx
	movq	-360(%rbp), %rsi
	movq	-368(%rbp), %rdx
	movq	%rax, %rdi
	callq	*%rcx
	cmpq	-576(%rbp), %rax
	je	LBB5_27
## BB#26:
	leaq	-648(%rbp), %rax
	leaq	-408(%rbp), %rcx
	movq	%rcx, -392(%rbp)
	movq	$-1, -400(%rbp)
	movq	-392(%rbp), %rcx
	movq	-400(%rbp), %rdx
	movq	%rcx, -376(%rbp)
	movq	%rdx, -384(%rbp)
	movq	-376(%rbp), %rcx
	movq	$0, (%rcx)
	movq	-408(%rbp), %rcx
	movq	%rcx, -648(%rbp)
	movq	%rax, -416(%rbp)
	movq	$0, -504(%rbp)
	movq	-504(%rbp), %rax
	movq	%rax, -496(%rbp)
	jmp	LBB5_29
LBB5_27:
	jmp	LBB5_28
LBB5_28:
	movq	-536(%rbp), %rax
	movq	%rax, -424(%rbp)
	movq	$0, -432(%rbp)
	movq	-424(%rbp), %rax
	movq	24(%rax), %rcx
	movq	%rcx, -440(%rbp)
	movq	-432(%rbp), %rcx
	movq	%rcx, 24(%rax)
	movq	-504(%rbp), %rax
	movq	%rax, -496(%rbp)
LBB5_29:
	movq	-496(%rbp), %rax
	addq	$720, %rsp              ## imm = 0x2D0
	popq	%rbp
	ret
LBB5_30:
	movq	-616(%rbp), %rdi
	callq	__Unwind_Resume
LBB5_31:
Ltmp89:
	movl	%edx, %ecx
	movq	%rax, %rdi
	movl	%ecx, -716(%rbp)        ## 4-byte Spill
	callq	___clang_call_terminate
LBB5_32:
	.cfi_endproc
Leh_func_end5:
	.section	__TEXT,__gcc_except_tab
	.align	2
GCC_except_table5:
Lexception5:
	.byte	255                     ## @LPStart Encoding = omit
	.byte	155                     ## @TType Encoding = indirect pcrel sdata4
	.asciz	"\274"                  ## @TType base offset
	.byte	3                       ## Call site Encoding = udata4
	.byte	52                      ## Call site table length
Lset70 = Leh_func_begin5-Leh_func_begin5 ## >> Call Site 1 <<
	.long	Lset70
Lset71 = Ltmp84-Leh_func_begin5         ##   Call between Leh_func_begin5 and Ltmp84
	.long	Lset71
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
Lset72 = Ltmp84-Leh_func_begin5         ## >> Call Site 2 <<
	.long	Lset72
Lset73 = Ltmp85-Ltmp84                  ##   Call between Ltmp84 and Ltmp85
	.long	Lset73
Lset74 = Ltmp86-Leh_func_begin5         ##     jumps to Ltmp86
	.long	Lset74
	.byte	0                       ##   On action: cleanup
Lset75 = Ltmp87-Leh_func_begin5         ## >> Call Site 3 <<
	.long	Lset75
Lset76 = Ltmp88-Ltmp87                  ##   Call between Ltmp87 and Ltmp88
	.long	Lset76
Lset77 = Ltmp89-Leh_func_begin5         ##     jumps to Ltmp89
	.long	Lset77
	.byte	1                       ##   On action: 1
Lset78 = Ltmp88-Leh_func_begin5         ## >> Call Site 4 <<
	.long	Lset78
Lset79 = Leh_func_end5-Ltmp88           ##   Call between Ltmp88 and Leh_func_end5
	.long	Lset79
	.long	0                       ##     has no landing pad
	.byte	0                       ##   On action: cleanup
	.byte	1                       ## >> Action Record 1 <<
                                        ##   Catch TypeInfo 1
	.byte	0                       ##   No further actions
                                        ## >> Catch TypeInfos <<
	.long	0                       ## TypeInfo 1
	.align	2

	.section	__TEXT,__textcoal_nt,coalesced,pure_instructions
	.globl	__Z7isasciii
	.weak_def_can_be_hidden	__Z7isasciii
	.align	4, 0x90
__Z7isasciii:                           ## @_Z7isasciii
	.cfi_startproc
## BB#0:
	pushq	%rbp
Ltmp97:
	.cfi_def_cfa_offset 16
Ltmp98:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
Ltmp99:
	.cfi_def_cfa_register %rbp
	movl	%edi, -4(%rbp)
	movl	-4(%rbp), %edi
	andl	$4294967168, %edi       ## imm = 0xFFFFFF80
	cmpl	$0, %edi
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	popq	%rbp
	ret
	.cfi_endproc

	.section	__TEXT,__cstring,cstring_literals
L_.str:                                 ## @.str
	.asciz	" "

	.section	__TEXT,__eh_frame,coalesced,no_toc+strip_static_syms+live_support

.subsections_via_symbols
